"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./src/features/speech_recognition.tsx":
/*!*********************************************!*\
  !*** ./src/features/speech_recognition.tsx ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass SpeechRecognition {\n    constructor(textarea, textareaOutput, setIsConnected, setFacialExpression, setAnimation){\n        this.isStarted = false;\n        this.isConnected = false;\n        this.isSent = false;\n        this.audioChecked = true;\n        this.beforSendTime = ()=>{\n            clearTimeout(this.sendTimeOut);\n            this.sendTimeOut = setTimeout(()=>{\n                //console.log(\"Send to server.\")\n                if (this.textarea.value != \"\" && !this.isSent) {\n                    //console.log(this.textarea.value)\n                    if (this.socket) {\n                        const data = {\n                            type: \"request_openai\",\n                            text: this.textarea.value\n                        };\n                        this.socket.send(JSON.stringify(data));\n                        this.isSent = true;\n                    }\n                    //this.textarea.value = \"\"\n                    this.speechRecognition.stop();\n                }\n                this.beforSendTime();\n            }, 3000);\n        };\n        this.onResult = (e)=>{\n            const results = e.results;\n            let transcript = \"\";\n            Array.from(results).forEach((result)=>{\n                const alternative = result[0];\n                transcript += alternative.transcript;\n            });\n            //console.log(transcript)\n            this.textarea.value = transcript;\n            this.beforSendTime();\n        };\n        this.onEnd = ()=>{\n            //this.textarea.value = \"\"\n            if (this.isStarted && !this.isSent) this.speechRecognition.start();\n        };\n        this.start = ()=>{\n            if (!this.isStarted) this.speechRecognition.start();\n            this.isStarted = true;\n            this.beforSendTime();\n            this.textarea.value = \"\";\n        };\n        this.stop = ()=>{\n            if (this.isStarted) this.speechRecognition.stop();\n            this.isStarted = false;\n            clearTimeout(this.sendTimeOut);\n            this.textarea.value = \"\";\n        };\n        this.getAudioDevice = async ()=>{\n            const devices = await navigator.mediaDevices.enumerateDevices();\n            return devices.filter((mdi)=>mdi.kind == \"audioinput\");\n        };\n        this.switchAudioInputDevice = async (deviceId)=>{\n            const newMediaStream = await navigator.mediaDevices.getUserMedia({\n                audio: {\n                    deviceId: {\n                        exact: deviceId\n                    }\n                },\n                video: false\n            });\n            this.mediaStream = newMediaStream;\n        };\n        this.mediaChange = (deviceId)=>{\n            console.log(deviceId);\n            this.switchAudioInputDevice(deviceId);\n        };\n        this.connectWebSocket = ()=>{\n            if (this.socket == undefined) {\n                this.socket = new WebSocket(\"ws://localhost:6336\");\n                this.socket.onopen = ()=>{\n                    console.log(\"WebSocket connected.\");\n                    this.setIsConnected(true);\n                };\n                this.socket.onmessage = (e)=>{\n                    console.log(e.data);\n                    const json = JSON.parse(e.data);\n                    //console.log(\"facialExpression: \"+json.facialExpression)\n                    //console.log(\"animation: \"+json.animation)\n                    //console.log(\"text: \"+json.text)\n                    this.setFacialExpression(json.facialExpression);\n                    this.setAnimation(json.animation);\n                    this.textareaOutput.value = json.text;\n                    this.isSent = true;\n                    if (this.audioChecked) {\n                        const audioBlob = new Blob([\n                            Uint8Array.from(atob(json.audio), (c)=>c.charCodeAt(0))\n                        ], {\n                            type: 'audio/mp3'\n                        });\n                        const audioUrl = URL.createObjectURL(audioBlob);\n                        const audio = new Audio(audioUrl);\n                        audio.play();\n                    }\n                    if (this.isStarted && !this.isSent) this.speechRecognition.start();\n                };\n                this.socket.onclose = ()=>{\n                    console.log(\"WebSocket closed.\");\n                    this.isConnected = false;\n                    this.isSent = false;\n                    this.setIsConnected(false);\n                    this.stop();\n                    console.log(\"end\");\n                };\n                this.socket.onerror = (e)=>{\n                    console.error(e);\n                };\n            } else {\n                this.socket.close();\n                this.socket = undefined;\n            }\n        };\n        this.textarea = textarea;\n        this.textareaOutput = textareaOutput;\n        this.setIsConnected = setIsConnected;\n        this.setFacialExpression = setFacialExpression;\n        this.setAnimation = setAnimation;\n        this.speechRecognition = new (window['SpeechRecognition'] || window['webkitSpeechRecognition'])();\n        this.mediaStream = null;\n        if (this.speechRecognition) {\n            console.log(\"SpeechRecognition started.\");\n            this.speechRecognition.lang = \"th-TH\";\n            this.speechRecognition.continuous = true;\n            this.speechRecognition.interimResults = true;\n            this.speechRecognition.onresult = this.onResult;\n            this.speechRecognition.onend = this.onEnd;\n        } else {\n            console.log(\"This Browser does not support SpeechRecognition.\");\n        }\n        navigator.mediaDevices.getUserMedia({\n            audio: true,\n            video: false\n        }).then((ms)=>this.mediaStream = ms).catch(console.error);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SpeechRecognition);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/features/speech_recognition.tsx\n"));

/***/ })

});